// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DBIDE.Views.MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      return MainView.__super__.constructor.apply(this, arguments);
    }

    MainView.prototype.template = "";

    MainView.prototype.initialize = function(options) {
      var files_collection, project, _i, _len, _ref;
      this.projects = [];
      this.current_file = new DBIDE.Models.File();
      _ref = options.projects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        console.log(project);
        files_collection = new DBIDE.Collections.FilesCollection();
        files_collection.reset(project);
        this.projects.push(files_collection);
      }
      this.current_file.on('change', this.render);
      return this.render();
    };

    MainView.prototype.render = function() {
      var files_collection, view, viewEls, views, _i, _len, _ref;
      views = [];
      _ref = this.projects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        files_collection = _ref[_i];
        view = new DBIDE.Views.FilesView({
          collection: files_collection
        });
        views.push(view.render());
      }
      viewEls = _.pluck(_.values(views), 'el');
      this.$("#file-browser").html(viewEls);
      return this.$("#editor").html(this.current_file.contents);
    };

    return MainView;

  })(Backbone.View);

}).call(this);
